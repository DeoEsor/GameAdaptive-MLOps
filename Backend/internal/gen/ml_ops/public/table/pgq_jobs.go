//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PgqJobs = newPgqJobsTable("public", "pgq_jobs", "")

type pgqJobsTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestampz
	TaskName   postgres.ColumnString
	Payload    postgres.ColumnString
	RunAfter   postgres.ColumnTimestampz
	RetryWaits postgres.ColumnInteger
	Error      postgres.ColumnString
	InRun      postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgqJobsTable struct {
	pgqJobsTable

	EXCLUDED pgqJobsTable
}

// AS creates new PgqJobsTable with assigned alias
func (a PgqJobsTable) AS(alias string) *PgqJobsTable {
	return newPgqJobsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PgqJobsTable with assigned schema name
func (a PgqJobsTable) FromSchema(schemaName string) *PgqJobsTable {
	return newPgqJobsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PgqJobsTable with assigned table prefix
func (a PgqJobsTable) WithPrefix(prefix string) *PgqJobsTable {
	return newPgqJobsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PgqJobsTable with assigned table suffix
func (a PgqJobsTable) WithSuffix(suffix string) *PgqJobsTable {
	return newPgqJobsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPgqJobsTable(schemaName, tableName, alias string) *PgqJobsTable {
	return &PgqJobsTable{
		pgqJobsTable: newPgqJobsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newPgqJobsTableImpl("", "excluded", ""),
	}
}

func newPgqJobsTableImpl(schemaName, tableName, alias string) pgqJobsTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		TaskNameColumn   = postgres.StringColumn("task_name")
		PayloadColumn    = postgres.StringColumn("payload")
		RunAfterColumn   = postgres.TimestampzColumn("run_after")
		RetryWaitsColumn = postgres.IntegerColumn("retry_waits")
		ErrorColumn      = postgres.StringColumn("error")
		InRunColumn      = postgres.BoolColumn("in_run")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, TaskNameColumn, PayloadColumn, RunAfterColumn, RetryWaitsColumn, ErrorColumn, InRunColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, TaskNameColumn, PayloadColumn, RunAfterColumn, RetryWaitsColumn, ErrorColumn, InRunColumn}
	)

	return pgqJobsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		TaskName:   TaskNameColumn,
		Payload:    PayloadColumn,
		RunAfter:   RunAfterColumn,
		RetryWaits: RetryWaitsColumn,
		Error:      ErrorColumn,
		InRun:      InRunColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
